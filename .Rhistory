plot2
plot2 = ggplot(data_1,aes(x=event,y=weekly_league_rank,color = name,group = name))+
geom_bump() +
scale_y_continuous(trans = "reverse",breaks = c(1:length(unique(data_1$name)))) +
geom_text(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Ranking Within Mini-League"),
y = "League Standing",x = "Participants")
# ggplotly(plot2)
plot2
cur_gw = max(data_1$event)
plot2 = ggplot(data_1,aes(x=event,y=weekly_league_rank,color = name,group = name))+
geom_bump() +
scale_y_continuous(trans = "reverse",breaks = c(1:length(unique(data_1$name)))) +
geom_text(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Ranking Within Mini-League"),
y = "League Standing",x = "Participants")
# ggplotly(plot2)
plot2
plot2 = ggplot(data_1,aes(x=event,y=weekly_league_rank,color = name,group = name))+
geom_bump() +
scale_y_continuous(trans = "reverse",breaks = c(1:length(unique(data_1$name)))) +
scale_x_continuous(breaks = c(1:cur_gw))+
geom_text(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Ranking Within Mini-League"),
y = "League Standing",x = "Gameweek")
# ggplotly(plot2)
plot2
plot2_b = ggplot(data_1,aes(x=event,y=overall_rank,color = name,group = name))+
geom_line() +
scale_y_continuous(trans = "reverse",labels = scales::comma,
limits = c(max(data_1$overall_rank),10000),
breaks = c(10000,100000,500000,1000000,5000000,max(data_1$overall_rank))) +
geom_text(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Overall Ranking"),
y = "League Standing",x = "Participants")
# ggplotly(plot2_b)
plot2_b
library(ggrepel)
plot2_b = ggplot(data_1,aes(x=event,y=overall_rank,color = name,group = name))+
geom_line() +
scale_y_continuous(trans = "reverse",labels = scales::comma,
limits = c(max(data_1$overall_rank),10000),
breaks = c(10000,100000,500000,1000000,5000000,max(data_1$overall_rank))) +
geom_text_repel(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Overall Ranking"),
y = "League Standing",x = "Participants")
# ggplotly(plot2_b)
plot2_b
plot2_b = ggplot(data_1,aes(x=event,y=overall_rank,color = name,group = name))+
geom_line() +
scale_y_continuous(trans = "reverse",labels = scales::comma,
limits = c(max(data_1$overall_rank),10000),
breaks = c(10000,100000,500000,1000000,5000000,max(data_1$overall_rank))) +
geom_label_repel(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Overall Ranking"),
y = "League Standing",x = "Participants")
# ggplotly(plot2_b)
plot2_b
participant_teams = readRDS("data/2_participant_team_df.RDS")
player_details = readRDS("data/2_fpl_player_stats_2324.RDS")
data_3 = participant_teams %>% filter(is_captain == TRUE)
captain_details = player_details %>% select(playername,web_name,total_points,'event' = round) %>% filter(playername %in% data_3$playername)
data_3 = left_join(data_3,captain_details,by = c('playername','event'))
plot3 = ggplot(data_3,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
legend.position = 'bottom'
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
p3_datamin = current_gw-5
plot2_b = ggplot(data_1,aes(x=event,y=overall_rank,color = name,group = name))+
geom_line() +
scale_y_continuous(trans = "reverse",labels = scales::comma,
limits = c(max(data_1$overall_rank),10000),
breaks = c(10000,100000,500000,1000000,5000000,max(data_1$overall_rank))) +
scale_x_continuous(breaks = c(1:cur_gw))+
geom_label_repel(
aes(label = p2_label),
x = cur_gw,
nudge_x = 2,nudge_y = .25,
size = 3
) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
legend.position = 'none'
)+
labs(title = paste0("Weekly Overall Ranking"),
y = "League Standing",x = "Participants")
# ggplotly(plot2_b)
plot2_b
View(data_3)
data_3_last_5 = data_3 %>% filter(event %in% c(p3_datamin:current_gw))
View(data_3_last_5)
plot3 = ggplot(data_3_last_5,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
scale_x_continuous(breaks = c(p3_datamin:cur_gw))+
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
legend.position = 'bottom'
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
plot3 = ggplot(data_3_last_5,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
scale_x_continuous(breaks = c(p3_datamin:cur_gw))+
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
legend.position = 'bottom',
legend.background = element_rect(fill = NA,size = 0.5,linetype = 'solid',colour = 'black'),
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
plot3 = ggplot(data_3_last_5,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
scale_x_continuous(breaks = c(p3_datamin:cur_gw))+
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
guides(fill = guide_colorsteps(barwidth = unit(15,"cm"),
barheight = 0.5,
title = "Total Points",
title.position = "top"))+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
legend.position = 'bottom',
legend.background = element_rect(fill = NA,size = 0.5,linetype = 'solid',colour = 'black'),
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
# ggplotly(plot3)
plot3
teams_this_gw = participant_teams %>% filter(event == current_gw) %>% rename("pos_infield" = position) %>%
left_join(player_details %>% select(playername,web_name,position) %>% distinct(playername,.keep_all = T)) %>%
mutate(pos_in_field = case_when(
pos_infield %in% c(1:11) ~ as.character(pos_infield),
pos_infield == 12 ~ "Sub Keeper",
pos_infield == 13 ~ "Sub 1",
pos_infield == 14 ~ "Sub 2",
pos_infield == 15 ~ "Sub 3"
),
pos_in_field = factor(pos_in_field,levels = c(as.character(1:11),"Sub Keeper","Sub 1","Sub 2","Sub 3")),
web_name2 = case_when(
is_captain == TRUE ~ paste0(web_name," (C)"),
is_vice_captain == TRUE ~ paste0(web_name," (V)"),
TRUE~web_name
),
position2 = case_when(
pos_in_field %in% c("Sub Keeper","Sub 1","Sub 2","Sub 3") ~ "Bench",
TRUE ~ position
))
plot4 = ggplot(teams_this_gw,aes(x = participant_name,y = forcats::fct_rev(pos_in_field), fill = position2))+
geom_tile(color = 'black')  +
scale_fill_manual(
values = c(
"GKP" = "#06d6a0",
"DEF" = "#118ab2",
"MID" = "#ffd166",
"FWD" = "#ef476f",
"Bench" = "#c9ada7"
),name = "Position"
)+
# scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
geom_text(aes(x = participant_name,y = pos_in_field,label = web_name2),size = 3.5) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_minimal()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
# legend.position = 'none',
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
)+
labs(x="Manager",y="Lineup",
title = paste0("Gameweek ",current_gw," Teams"),
subtitle = "Color Indicates Position")
# ggplotly(plot4)
plot4
chip_tracker_df = readRDS("data/3_chip_tracker.RDS")
ggplot(chip_tracker_df,aes(x = chip,y = manager_name, fill = val))+
geom_tile(color = 'black') + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_gradientn(colours = c("white", "blue", "yellow"), values = c(NA,0,1)) +
geom_text(aes(x = chip,y = manager_name,label = event)) +
theme_bw()+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.position="none") +
labs(x="Chips",y="Manager",
title = "FPL Chip Usage Tracker")
transfers = readRDS("data/4_fpl_transfers.RDS")
transfers_latest = transfers %>% filter(gw == current_gw) %>% select(-c(id_in,id_out)) %>% rename('manager' = participant_name)
formattable(transfers_latest,list(
player_out = color_bar('#f28482'),
player_in = color_bar('#80ed99'),
gw = color_bar('#e9c46a'),
manager = color_bar('#48cae4')
))
plot3 = ggplot(data_3_last_5,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
scale_x_continuous(breaks = c(p3_datamin:cur_gw))+
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
guides(fill = guide_colorsteps(barwidth = unit(0.5,"cm"),
barheight = 15,
title = "Total Points",
title.position = "top"))+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
# legend.position = 'bottom',
legend.background = element_rect(fill = NA,size = 0.5,linetype = 'solid',colour = 'black'),
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
plot3 = ggplot(data_3_last_5,aes(x = event,y = participant_name, fill = total_points))+
geom_tile(color = 'black')  +
scale_fill_distiller(palette = "YlOrRd",direction = 1,name = "Total Points") +
scale_x_continuous(breaks = c(p3_datamin:cur_gw))+
geom_text(aes(x = event,y = participant_name,label = web_name)) +
# scale_fill_gradientn(colours = c("white", "white", "yellow"), values = c(NA,0,1)) +
theme_bw()+
guides(fill = guide_colorsteps(barwidth = unit(0.5,"cm"),
barheight = 15,
title = "Total\nPoints",
title.position = "top"))+
theme(plot.title = element_text(face='bold'),
axis.title = element_text(face='bold'),
axis.text = element_text(face='bold'),
legend.title = element_text(face='bold'),
legend.text = element_text(face='bold'),
# legend.position = 'bottom',
legend.background = element_rect(fill = NA,size = 0.5,linetype = 'solid',colour = 'black'),
)+
labs(x="Gameweek",y="Manager",
title = "Captaincy Choice by Gameweek",
subtitle = "Color Indicates Points Obtained")
# ggplotly(plot3)
plot3
?get_player_details
?get_player_info
remotes::install_github("wiscostret/fplscrapR")
?remotes::install_github
Sys.getenv("GITHUB_PAT")
View(get_round_info)
View(get_player_name)
View(get_player_info)
View(get_player_details)
View(get_entry_season)
View(get_entry_player_picks)
# Code to update Live
# library(fplscrapR)
library(tidyverse)
source("fcn_fplscrapr.R")
fpl_bootstrap = jsonlite::fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")
pl_teams_id = fpl_bootstrap[["teams"]]
fpl_contender_league_id = 255511
round_info = get_round_info()
# Getting League Details
fpl_league_query = function(league_id,league_type){
if(!league_type %in% c("classic","h2h")){
stop("Incorrect League Type; classic or h2h")
}
league <- jsonlite::fromJSON(curl::curl(paste("https://fantasy.premierleague.com/api/leagues-",
league_type, "/", league_id, "/standings/", sep = "")))
return(league)
}
fpl_contender_participant = fpl_league_query(fpl_contender_league_id,"classic")
participant_df = fpl_contender_participant[["standings"]][["results"]]
# 1.0 Gameweek Points
entry_season = get_entry_season(participant_df$entry) %>%
left_join(.,round_info %>% select("event" = id,average_entry_score))
current_gw = max(entry_season$event)
# current_gw = max(entry_season$event)
gw_weekly_scores = entry_season %>%
mutate(above_avg = ifelse(points >= average_entry_score,"Above Average","Below Average"))
saveRDS(gw_weekly_scores,"docs/data/1_gw_weekly_scores.RDS")
# 2.0 Get Participant's Teams
##### Run Weekly to get Latest Teams ####
ppn_team_df = readRDS("docs/data/2_participant_team_df.RDS")
for(i in 1:nrow(participant_df)){
participant_name = participant_df$player_name[i]
thisgw = get_entry_player_picks(entryid = participant_df[["entry"]][[i]],gw = current_gw)
thisgw = thisgw %>% mutate(participant_name = participant_name)
ppn_team_df = bind_rows(ppn_team_df,thisgw)
}
# Code to update Live
# library(fplscrapR)
library(tidyverse)
source("fcn_fplscrapr.R")
fpl_bootstrap = jsonlite::fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")
pl_teams_id = fpl_bootstrap[["teams"]]
fpl_contender_league_id = 255511
round_info = get_round_info()
# Getting League Details
fpl_league_query = function(league_id,league_type){
if(!league_type %in% c("classic","h2h")){
stop("Incorrect League Type; classic or h2h")
}
league <- jsonlite::fromJSON(curl::curl(paste("https://fantasy.premierleague.com/api/leagues-",
league_type, "/", league_id, "/standings/", sep = "")))
return(league)
}
fpl_contender_participant = fpl_league_query(fpl_contender_league_id,"classic")
participant_df = fpl_contender_participant[["standings"]][["results"]]
# 1.0 Gameweek Points
entry_season = get_entry_season(participant_df$entry) %>%
left_join(.,round_info %>% select("event" = id,average_entry_score))
current_gw = max(entry_season$event)
gw_weekly_scores = entry_season %>%
mutate(above_avg = ifelse(points >= average_entry_score,"Above Average","Below Average"))
##### Run Weekly to get Latest Teams ####
ppn_team_df = readRDS("docs/data/2_participant_team_df.RDS")
for(i in 1:nrow(participant_df)){
participant_name = participant_df$player_name[i]
thisgw = get_entry_player_picks(entryid = participant_df[["entry"]][[i]],gw = current_gw)
thisgw = thisgw %>% mutate(participant_name = participant_name)
ppn_team_df = bind_rows(ppn_team_df,thisgw)
}
# Archived for reference
library(fplscrapR)
force(get_entry)
View(get_entry)
# 6.0 Get Entry Player Picks
get_entry = function (entryid = NULL)
{
if (is.null(entryid))
stop("You'll need to input at least one entry ID, mate.")
if (length(entryid) != 1)
stop("One at a time, please")
{
entry <- jsonlite::fromJSON(paste("https://fantasy.premierleague.com/api/entry/",
entryid, "/", sep = ""))
return(entry)
}
}
ddetach("package:fplscrapR", unload=TRUE)
detach("package:fplscrapR", unload=TRUE)
##### Run Weekly to get Latest Teams ####
ppn_team_df = readRDS("docs/data/2_participant_team_df.RDS")
for(i in 1:nrow(participant_df)){
participant_name = participant_df$player_name[i]
thisgw = get_entry_player_picks(entryid = participant_df[["entry"]][[i]],gw = current_gw)
thisgw = thisgw %>% mutate(participant_name = participant_name)
ppn_team_df = bind_rows(ppn_team_df,thisgw)
}
rm(participant_name,thisgw)
# 3.0 Basic Player Data
######## Run once to get previous GW Teams #####
# Will take a long time to run!
player_data_fpl = get_player_details()
player_data_fpl_detailed = get_player_info()
player_data_fpl_detailed_names = player_data_fpl_detailed %>% select(id,web_name,element_type) %>% mutate(position = case_when(
element_type == 1 ~ "GKP",
element_type == 2 ~ "DEF",
element_type == 3 ~ "MID",
element_type == 4 ~ "FWD"
)) %>% select(-element_type)
player_data_fpl_2 = left_join(player_data_fpl,player_data_fpl_detailed_names, by = c('element'='id'))
chip_obtainer = function(id){
require(dplyr)
require(jsonlite)
if (is.null(id)){
stop("Please provide 1 or more ID")
}
chip_df = data.frame()
for (i in 1:length(id)) {
entry_detail = jsonlite::fromJSON(paste0("https://fantasy.premierleague.com/api/entry/",id[i],"/"))
entr_hist = jsonlite::fromJSON(paste0("https://fantasy.premierleague.com/api/entry/",id[i],"/history/"))
chip_usage = entr_hist[["chips"]]
if(length(chip_usage) > 0){
chip_usage = chip_usage %>% dplyr::mutate(id = id[i],manager_name = paste(entry_detail$player_first_name,entry_detail$player_last_name))
}else{
next
}
chip_df = bind_rows(chip_df,chip_usage)
}
if(length(chip_df) == 0){
txt = "No chip has been used by the selected Manager"
return(txt)
}else{
return(chip_df)
}
}
chip_tracker = chip_obtainer(participant_df$entry)
chip_tracker = chip_tracker %>% mutate(val = 1,
chip = case_when(
name != 'wildcard' ~ stringr::str_to_title(name),
name == 'wildcard' & event %in% c(1:19) ~ "Wildcard 1",
name == 'wildcard' & event %in% c(20:38) ~ "Wildcard 2"
),
event = paste("GW",event))
# 4.0 Transfer
# Get Weeks where Manager made transfers
transfer_check = entry_season %>% filter(event_transfers>0) %>% arrange(event)
league_player_transfers = data.frame()
for(i in 1:nrow(transfer_check)){
current_gw = transfer_check$event[i]
participant = transfer_check$name[i]
prev_week = ppn_team_df %>% filter(participant_name == participant, event == current_gw-1) %>% arrange(position)
current_week = ppn_team_df %>% filter(participant_name == participant, event == current_gw) %>% arrange(position)
transferred_out = anti_join(prev_week,current_week, by = "id") %>% select(participant_name,"id_out" = id,"player_out" = playername,"prev_gw" = event)
transferred_in = anti_join(current_week,prev_week, by = "id") %>% select("id_in" = id,"player_in" = playername,"gw" = event)
newtable = cbind(transferred_out,transferred_in)
league_player_transfers = bind_rows(league_player_transfers,newtable)
}
